trigger:
  batch: true
  branches:
    include:
    - master

parameters:
- name: DirectDeploy
  default: true
  type: boolean

variables:
- group: DXP-variables
#- name: webProjectDirectory
#  value: '[SolutionName]/[ProjectName]' #Is used when using npm tasks in the build.

stages:
- stage: Build
  jobs:
  - job: BuildNugetPackage

    pool:
      name: Azure Pipelines
      vmImage: 'windows-latest'
      demands:
      - npm
      - msbuild
      - visualstudio
      - vstest

    variables:
      solution: '**/*.sln'
      buildPlatform: 'Any CPU'
      buildConfiguration: 'Release'

    steps:

    - task: NuGetToolInstaller@0
      displayName: 'Use NuGet 5.*'
      inputs:
        versionSpec: '5.*'

    - task: NuGetCommand@2
      displayName: 'NuGet restore'
      inputs:
        command: 'restore'
        restoreSolution: '$(Solution)'
        feedsToUse: 'config'
        nugetConfigPath: 'NuGet.config'

#    - task: Npm@1
#      displayName: 'NPM Set progress false (speedup)'
#      inputs:
#        command: custom
#        verbose: false
#        customCommand: 'set progress=false'

#    - task: Npm@1
#      displayName: 'npm install'
#      inputs:
#        workingDir: '$(WebProjectDirectory)'
#        verbose: false

#    - task: Npm@1
#      displayName: 'npm run build'
#      inputs:
#        command: custom
#        workingDir: '$(WebProjectDirectory)'
#        verbose: false
#        customCommand: 'run build'

    - task: VSBuild@1
      displayName: 'Build solution'
      inputs:
        solution: '$(Solution)'
        msbuildArgs: '/p:Configuration=Release;DeployOnBuild=True;DeployDefaultTarget=WebPublish;WebPublishMethod=FileSystem;PublishProvider=FileSystem;LastUsedBuildConfiguration=Release;ExcludeApp_Data=False;publishUrl=$(System.DefaultWorkingDirectory)\wwwroot;DeleteExistingFiles=False'
        platform: '$(BuildPlatform)'
        configuration: '$(BuildConfiguration)'

    - task: VSTest@2
      displayName: 'Run unittests'
      inputs:
        testSelector: 'testAssemblies'
        testAssemblyVer2: |
          **\*Tests.dll
          !**\*TestAdapter.dll
          !**\obj\**
        searchFolder: '$(System.DefaultWorkingDirectory)'
        platform: '$(BuildPlatform)'
        configuration: '$(BuildConfiguration)'
        failOnMinTestsNotRun: true

    - task: ArchiveFiles@2
      displayName: 'Create NuGet package'
      inputs:
        rootFolderOrFile: '$(System.DefaultWorkingDirectory)\wwwroot'
        includeRootFolder: true
        archiveType: 'zip'
        archiveFile: '$(build.artifactStagingDirectory)\$(NuGetPackageNamePrefix).cms.app.$(Build.BuildNumber).nupkg'
        replaceExistingArchive: true

    - task: PublishBuildArtifacts@1
      displayName: 'Publish artifact'
      inputs:
        PathtoPublish: '$(Build.ArtifactStagingDirectory)'
        ArtifactName: 'drop'
        publishLocation: 'Container'

- stage: DeployIntegration
  dependsOn: Build
  condition: and(succeeded(), eq(variables['Build.SourceBranch'], 'refs/heads/master'))
  jobs:
  - job: DeployToIntegration
    displayName: 'Deploy to Integration'
    pool:
      vmImage: 'windows-latest'
    
    steps:
    - task: DownloadBuildArtifacts@0
      inputs:
        buildType: 'current'
        artifactName: 'drop'
        downloadPath: '$(System.DefaultWorkingDirectory)'

    # - task: CmdLine@2 #Debuging. See what is in the folder.
    #   inputs:
    #     script: |
    #       echo All folders and files in this path

    #       dir /b /s

    - task: DxpDeployNuGetPackage@1
      inputs:
        ClientKey: '$(ClientKey)'
        ClientSecret: '$(ClientSecret)'
        ProjectId: '$(DXP.ProjectId)'
        DropPath: '$(System.DefaultWorkingDirectory)\drop'
        TargetEnvironment: 'Integration'
        SourceApp: 'cms'
        UseMaintenancePage: false
        DirectDeploy: ${{ parameters.DirectDeploy }}
        IncludeBlob: false
        IncludeDb: false
        Timeout: 1800

    - task: DxpSmokeTestIfFailReset@1
      condition: and(succeeded(), eq('${{ parameters.DirectDeploy }}', false))
      inputs:
        ClientKey: '$(ClientKey)'
        ClientSecret: '$(ClientSecret)'
        ProjectId: '$(DXP.ProjectId)'
        TargetEnvironment: 'Integration'
        Urls: '$(Integration.SlotUrl)$(Integration.UrlSuffix)'
        SleepBeforeStart: 20
        NumberOfRetries: 5
        SleepBeforeRetry: 30
        Timeout: 1800

    - task: DxpCompleteDeploy@1
      condition: and(succeeded(), eq('${{ parameters.DirectDeploy }}', false))
      inputs:
        ClientKey: '$(ClientKey)'
        ClientSecret: '$(ClientSecret)'
        ProjectId: '$(DXP.ProjectId)'
        TargetEnvironment: 'Integration'
        Timeout: 1800

    #- task: Webapp Warmup@1
    #  inputs:
    #    Url: '$(Integration.Url)'
    #    RetryCount: '3'
    #    IgnoreError: true
    #    Suffixes: '$(Integration.UrlSuffix)'

- stage: DeployPreproduction
  dependsOn: DeployIntegration
  condition: and(succeeded(), eq(variables['Build.SourceBranch'], 'refs/heads/master'))
  jobs:
  - deployment: ReleasePrep
    displayName: 'Deploy to Preproduction'
    pool:
      vmImage: 'windows-latest'
    environment: 'Preproduction-environment'
    strategy:
      runOnce:
        deploy:
   
          steps:
          - task: DxpDeployTo@1
            inputs:
              ClientKey: '$(ClientKey)'
              ClientSecret: '$(ClientSecret)'
              ProjectId: '$(DXP.ProjectId)'
              SourceEnvironment: 'Integration'
              TargetEnvironment: 'Preproduction'
              SourceApp: 'cms'
              UseMaintenancePage: true
              IncludeBlob: false
              IncludeDb: false
              Timeout: 1800

          - task: DxpSmokeTestIfFailReset@1
            inputs:
              ClientKey: '$(ClientKey)'
              ClientSecret: '$(ClientSecret)'
              ProjectId: '$(DXP.ProjectId)'
              TargetEnvironment: 'Preproduction'
              Urls: '$(Preproduction.SlotUrl)$(Preproduction.UrlSuffix)'
              SleepBeforeStart: 20
              NumberOfRetries: 5
              SleepBeforeRetry: 30
              Timeout: 1800

          - task: DxpCompleteDeploy@1
            inputs:
              ClientKey: '$(ClientKey)'
              ClientSecret: '$(ClientSecret)'
              ProjectId: '$(DXP.ProjectId)'
              TargetEnvironment: 'Preproduction'
              Timeout: 1800

          #- task: Webapp Warmup@1
          #  inputs:
          #    Url: '$(Preproduction.Url)'
          #    RetryCount: '3'
          #    IgnoreError: true
          #    Suffixes: '$(Preproduction.UrlSuffix)'

- stage: DeployProduction
  dependsOn: DeployPreproduction
  condition: and(succeeded(), eq(variables['Build.SourceBranch'], 'refs/heads/master'))
  jobs:
  - deployment: ReleaseProd
    displayName: 'Deploy to Production'
    pool:
      vmImage: 'windows-latest'
    environment: 'Production-environment'
    strategy:
      runOnce:
        deploy:
   
          steps:

          - task: DxpDeployTo@1
            inputs:
              ClientKey: '$(ClientKey)'
              ClientSecret: '$(ClientSecret)'
              ProjectId: '$(DXP.ProjectId)'
              SourceEnvironment: 'Preproduction'
              TargetEnvironment: 'Production'
              SourceApp: 'cms'
              UseMaintenancePage: false
              IncludeBlob: false
              IncludeDb: false
              Timeout: 1800

          - task: DxpSmokeTestIfFailReset@1
            inputs:
              ClientKey: '$(ClientKey)'
              ClientSecret: '$(ClientSecret)'
              ProjectId: '$(DXP.ProjectId)'
              TargetEnvironment: 'Production'
              Urls: '$(Production.SlotUrl)$(Production.UrlSuffix)'
              SleepBeforeStart: 20
              NumberOfRetries: 5
              SleepBeforeRetry: 30
              Timeout: 1800

          - task: DxpCompleteDeploy@1
            inputs:
              ClientKey: '$(ClientKey)'
              ClientSecret: '$(ClientSecret)'
              ProjectId: '$(DXP.ProjectId)'
              TargetEnvironment: 'Production'
              Timeout: 1800

          #- task: Webapp Warmup@1
          #  inputs:
          #    Url: '$(Production.Url)'
          #    RetryCount: '3'
          #    IgnoreError: true
          #    Suffixes: '$(Production.UrlSuffix)'


